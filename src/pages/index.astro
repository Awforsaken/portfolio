---
import { contentfulClient } from "../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { EntryFieldTypes, Asset } from "contentful";
import Header from '../components/Header.astro';

import '../../styles/global.css';
import '../../styles/type.css';
import '../../styles/colours.css';
import '../../styles/bento.css';

// Define the BlogPost interface for typing
export interface BlogPost {
  contentTypeId: "post",
  fields: {
    title: EntryFieldTypes.Text,
    size: EntryFieldTypes.Text,
    content: EntryFieldTypes.RichText,
    titleImage: EntryFieldTypes.Text, // Image as an asset from Contentful
    tagging: EntryFieldTypes.Text[], // Assuming tagging is a text array of tag names or IDs
    slug: EntryFieldTypes.Text // Add slug field
  }}

// Fetch the blog post entries
const entries = await contentfulClient.getEntries<BlogPost>({
  content_type: "post",
});

// Manually define available tags
const availableTags = ['Personal', 'Web dev', 'Work', 'UX/UI', 'Design']; 

const name = 'barry'; // Just a variable for testing

---

<head>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">

  <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
  <script src="/filter.js" defer></script>
</head>
<body>
  <Header />
  <div class="core-width outline">
    <div class="hero padded">
      <h1 class="h1 mono text-high"><span class="highlight-red">Dan</span>ielius M.</h1>
      <div class="text-low mono">UX & UI designer</div>
      <div class="text-mid text-max text-high">
        I am a UX and UI designer, general creative who loves tinkering with code...
      </div>
      <div class="mono">
        This work in progress and I still have things to do:
        <ul>
          <li>mobile header</li>
          <li>styling for portfolio bento // clean up bento.css</li>
          <li>sort out about me section</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="outline">
    <div class="core-width lined outline h-2rem"></div>
  </div>
  <div class="outline">
    <div class="core-width outline">
      <h1 class="h2 padded mono">Project highlights</h1>
    
    </div>
  </div>
  <div class="outline">
          <!-- Manually configured checkboxes for filtering -->
   <div id="tag-filters" class="outline core-width lined">
  {availableTags.map(tag => (
    <label key={tag} class="tag-filter-option outline mono">
      <input type="checkbox" value={tag} checked/>
      <span>{tag}</span>
    </label>
  ))}
    <span>
      <input type="checkbox" id="orange" name="orange" checked >
      <label for="orange" >Orange</label>
    </span>
</div>      
  </div>
  <div class="outline">
    <div class="core-width outline">
      <!-- Display blog posts dynamically -->
      <div class="bento-container lined" id="post-container">
        {entries.items.map((item) => {
          const sizeClass = item.fields.size || 'size-small';
          const imageUrl = item.fields.titleImage?.fields.file.url;
          const postTags = item.fields.tagging || [];
          const tagClasses = postTags.map(tag => tag.replace(/\s+/g, '-').toLowerCase()).join(' ');
          const slug = item.fields.slug; // Fetch the slug from Contentful
      
          return (
            <a href={`/posts/${slug}`} key={slug} class={`bento-item outline ${sizeClass} ${tagClasses}`} 
                style={imageUrl ? `background-image: url(${imageUrl});` : ''}
                data-tags={postTags.join(',')}>  {/* Link to individual post using slug */}
              
                
                <div class="bento-info-card">
                  <h2 class="h5 mono">{item.fields.title}</h2>
                </div>
        
                {postTags.length > 0 && (
                  <div class="bento-tags">
                    {postTags.map(tag => (
                      <span key={tag} class="tag mono">{tag}</span>
                    ))}
                  </div>
                )}
              
            </a>
          );
        })}
      </div>
    </div>
  </div>
  <div class="outline">
    <div class="core-width lined outline h-2rem"></div>
  </div>
  

  

  {name}
</body>
